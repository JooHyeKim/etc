class Solution(object):
    ## dp 방법
    ## s1과 s2가 순서대로 끼워넣기가 되기 때문에 dp로 한칸 전의 상태만 파악하면 된다.
    ## i =0, j=0인 경우를 따로 넣어 행렬을 벗어나는 오류에 대비
    ## 최종적으로 마지막 값만 확인하면 된다.
    
    def isInterleave(self, s1, s2, s3):
        row = len(s1)+1
        col = len(s2)+1
        if row + col -2 != len(s3):
            return False
        
        
#         check = [False] * row
#         for i in range(row):
#             check[i] = [False] * col
        '''
            코드 수정 by 김성식
            더 깔끔하게 하기 위해
            list comprehension 사용
        '''
        check = [[False] * col for _ in range(row)]
        
        check[0][0] = True
        
        '''
            코드 수정 by 김성식
            for loop을 하나로 합친 것을 나눔으로써
            base case와 recursive equation 부분을 나누고
            쓸모없는 if문을 제외함으로써 효율성을 약간 높임
        '''
        for i in range(1, row):
            if s1[i-1] == s3[i-1]:
                check[i][0] = True
            else:
                break
        for i in range(1, col):
            if s2[i-1] == s3[i-1]:
                check[0][i] = True
            else:
                break
        
        
        for i in range(1, row):
            for j in range(1, col):
                # if i == 0 and j ==0:
                #     continue     
                # elif i == 0:
                #     check[i][j] = check[i][j-1] and s2[j-1] ==s3[i+j-1]
                # elif j == 0:
                #     check[i][j] = check[i-1][j] and s1[i-1] ==s3[i+j-1]        
                # else:
                check[i][j] = ((check[i-1][j] and s1[i-1] == s3[i+j-1]) or (check[i][j-1] and s2[j-1] == s3[i+j-1]))

        return check[-1][-1]
